// 194B - Square
//                  Date             ccodefoces handle
// 284380580	Oct/05/2024 04:19	AR_JA_SA

/*

B. Square
time limit per test2 seconds
memory limit per test256 megabytes

There is a square painted on a piece of paper, the square's side equals n meters. John Doe draws crosses on the square's perimeter. John paints the first cross in the lower left corner of the square. Then John moves along the square's perimeter in the clockwise direction (first upwards, then to the right, then downwards, then to the left and so on). Every time he walks (n + 1) meters, he draws a cross (see picture for clarifications).

John Doe stops only when the lower left corner of the square has two crosses. How many crosses will John draw?

Input
The first line contains integer t (1 ≤ t ≤ 10^4) — the number of test cases.

The second line contains t space-separated integers ni (1 ≤ ni ≤ 10^9) — the sides of the square for each test sample.

Output
For each test sample print on a single line the answer to it, that is, the number of crosses John will draw as he will move along the square of the corresponding size. Print the answers to the samples in the order in which the samples are given in the input.

Please do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.

Examples

Input
3
4 8 100
Output
17
33
401

*/

#include <stdio.h>
#include <stdlib.h>

#define LL_I long long int
void read_arr(int n,LL_I *arr);
LL_I check(LL_I k);

int main()
{
    int n;
    scanf("%d",&n);
    LL_I *side=malloc(n*sizeof(LL_I));
    read_arr(n,side);
    for(int i=0;i<n;i++)
        printf("%lld\n",check(side[i]));

    return 0;
}

void read_arr(int n,LL_I *arr)
{
    for (int j=0;j<n;j++)
	scanf("%lld",&arr[j]);

}

LL_I check(LL_I k)
{
    LL_I l=0;
    if(k%2==0)
     l=4*k+1;
    else
    {
        if((k+1)%4==0)
            l=k+1;
        else
            l=2*k+1;
    }
    return l;

}
